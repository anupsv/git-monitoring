name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v4
        # Specific commit hash for actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe  # v4
        # Specific commit hash for actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Update dependencies 
        run: go mod tidy

      - name: Run linters
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run ./...

      - name: Run tests
        run: go test -v ./... ./pkg/tools/common/test ./pkg/tools/prchecker/test ./pkg/config/test

      - name: Build binaries
        run: |
          mkdir -p bin
          GOOS=linux GOARCH=amd64 go build -o bin/git-monitor-linux-amd64 ./cmd/git-monitor
          GOOS=darwin GOARCH=amd64 go build -o bin/git-monitor-darwin-amd64 ./cmd/git-monitor
          GOOS=darwin GOARCH=arm64 go build -o bin/git-monitor-darwin-arm64 ./cmd/git-monitor
          GOOS=windows GOARCH=amd64 go build -o bin/git-monitor-windows-amd64.exe ./cmd/git-monitor

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Linux Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/git-monitor-linux-amd64
          asset_name: git-monitor-linux-amd64
          asset_content_type: application/octet-stream

  docker:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    needs: [release]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v4
        # Specific commit hash for actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}


      - name: Build and push
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
            subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
            subject-digest: ${{ steps.push.outputs.digest }}
            push-to-registry: true